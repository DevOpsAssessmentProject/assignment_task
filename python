from datetime import datetime, timedelta
from collections import defaultdict

def solution(D):
    
    date_value_map = {datetime.strptime(k, "%Y-%m-%d"): v for k, v in D.items()}
    
    
    sorted_dates = sorted(date_value_map.keys())
    
    full_dates = {}
    for i, date in enumerate(sorted_dates):
        full_dates[date] = date_value_map[date]
    
    
    start_date = sorted_dates[0]
    end_date = sorted_dates[-1]

    current_date = start_date
    while current_date <= end_date:
        if current_date not in full_dates:
           
            prev_date = current_date - timedelta(days=1)
            while prev_date not in full_dates:
                prev_date -= timedelta(days=1)
            
          
            next_date = current_date + timedelta(days=1)
            while next_date not in full_dates:
                next_date += timedelta(days=1)
            
            full_dates[current_date] = (full_dates[prev_date] + full_dates[next_date]) // 2
        current_date += timedelta(days=1)
    
    
    result = defaultdict(int)
    for date, value in full_dates.items():
        weekday = date.strftime("%a")  # Mon, Tue, ...
        result[weekday] += value
    
    weekdays = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
    return {day: result.get(day, 0) for day in weekdays}
